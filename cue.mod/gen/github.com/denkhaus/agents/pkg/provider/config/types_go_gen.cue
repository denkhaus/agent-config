// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/denkhaus/agents/pkg/provider/config

package config

import (
	"github.com/google/uuid"
	"github.com/denkhaus/agents/shared"
)

// AgentConfig represents a complete agent configuration
#AgentConfig: {
	agent_id:     uuid.#UUID        @go(AgentID)
	name:         string            @go(Name)
	description?: string            @go(Description)
	type:         shared.#AgentType @go(Type)
	prompt:       #PromptConfig     @go(Prompt)
	settings:     #SettingsConfig   @go(Settings)
	tools:        #ToolsConfig      @go(Tools)
}

// PromptConfig represents prompt configuration
#PromptConfig: {
	agent_id:            uuid.#UUID @go(AgentID)
	name:                string     @go(Name)
	description?:        string     @go(Description)
	global_instruction?: string     @go(GlobalInstruction)
	content:             string     @go(Content)
	schema: {...} @go(Schema,map[string]interface{})
}

// SettingsConfig represents agent settings
#SettingsConfig: {
	agent_id:     uuid.#UUID     @go(AgentID)
	name:         string         @go(Name)
	description?: string         @go(Description)
	agent:        #AgentSettings @go(Agent)
}

// AgentSettings represents the agent runtime settings
#AgentSettings: {
	application_name:    string       @go(ApplicationName)
	planning_enabled:    bool         @go(PlanningEnabled)
	react_enabled:       bool         @go(ReactEnabled)
	max_iterations:      int          @go(MaxIterations)
	timeout:             int          @go(Timeout)
	streaming_enabled:   bool         @go(StreamingEnabled)
	channel_buffer_size: int          @go(ChannelBufferSize)
	llm:                 #LLMSettings @go(LLM)
	sub_agents?: [...uuid.#UUID] @go(SubAgents,[]uuid.UUID)
	input_schema?: {...} @go(InputSchema,map[string]interface{})
	output_schema?: {...} @go(OutputSchema,map[string]interface{})
	output_key?: string @go(OutputKey)
}

// LLMSettings represents LLM configuration
#LLMSettings: {
	model:                string                @go(Model)
	temperature:          float64               @go(Temperature)
	max_tokens:           int                   @go(MaxTokens)
	top_p:                float64               @go(TopP)
	frequency_penalty:    float64               @go(FrequencyPenalty)
	presence_penalty:     float64               @go(PresencePenalty)
	provider:             shared.#ModelProvider @go(Provider)
	base_url?:            string                @go(BaseURL)
	api_key?:             string                @go(APIKey)
	channel_buffer_size?: int                   @go(ChannelBufferSize)
}

// ToolsConfig represents tool configuration
#ToolsConfig: {
	name:         string @go(Name)
	description?: string @go(Description)
	tools: {[string]: #ToolConfig} @go(Tools,map[string]ToolConfig)
	toolsets: {[string]: #ToolSetConfig} @go(ToolSets,map[string]ToolSetConfig)
}

// ToolConfig represents individual tool configuration
#ToolConfig: {
	enabled: bool @go(Enabled)
	config?: {...} @go(Config,map[string]interface{})
}

// ToolSetConfig represents tool set configuration
#ToolSetConfig: {
	enabled: bool @go(Enabled)
	config?: {...} @go(Config,map[string]interface{})
}

// AgentFactory creates agents using configuration-based approach
#AgentFactory: _

// ToolFactory creates tools from configuration
#ToolFactory: _

// ConfigProvider loads configurations from various sources
#ConfigProvider: _
