// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/denkhaus/agents/pkg/session/condenser

package condenser

import "time"

// TokenCountingMethod defines the method used for counting tokens
#TokenCountingMethod: int // #enumTokenCountingMethod

#enumTokenCountingMethod:
	#TokenCountingAuto |
	#TokenCountingHeuristic |
	#TokenCountingLLMNative |
	#TokenCountingTikToken |
	#TokenCountingCustom

#values_TokenCountingMethod: {
	TokenCountingAuto:      #TokenCountingAuto
	TokenCountingHeuristic: #TokenCountingHeuristic
	TokenCountingLLMNative: #TokenCountingLLMNative
	TokenCountingTikToken:  #TokenCountingTikToken
	TokenCountingCustom:    #TokenCountingCustom
}

#TokenCountingAuto:      #TokenCountingMethod & 0
#TokenCountingHeuristic: #TokenCountingMethod & 1
#TokenCountingLLMNative: #TokenCountingMethod & 2
#TokenCountingTikToken:  #TokenCountingMethod & 3
#TokenCountingCustom:    #TokenCountingMethod & 4

// AccuracyLevel indicates the precision of token counting
#AccuracyLevel: int // #enumAccuracyLevel

#enumAccuracyLevel:
	#AccuracyEstimated |
	#AccuracyPrecise |
	#AccuracyExact

#values_AccuracyLevel: {
	AccuracyEstimated: #AccuracyEstimated
	AccuracyPrecise:   #AccuracyPrecise
	AccuracyExact:     #AccuracyExact
}

#AccuracyEstimated: #AccuracyLevel & 0
#AccuracyPrecise:   #AccuracyLevel & 1
#AccuracyExact:     #AccuracyLevel & 2

// TokenCounter interface for counting tokens in text
#TokenCounter: _

// TokenCounterInfo provides metadata about the token counter
#TokenCounterInfo: {
	Method:      #TokenCountingMethod
	Accuracy:    #AccuracyLevel
	ModelName:   string
	Description: string
}

// Config holds all configuration for the condenser
#Config: {
	// Token limits
	MaxContextTokens: int
	TriggerThreshold: float64

	// Condensation behavior
	RecentEventsToKeep: int
	SummaryPrompt:      string

	// Token counting
	TokenCountingMethod: #TokenCountingMethod
	CharsPerToken:       float64

	// Performance
	EnableTokenCaching: bool
	CacheSize:          int
}

// Metrics tracks condensation performance
#Metrics: {
	CondensationCount:     int64
	TotalTokensSaved:      int64
	AverageReductionRatio: float64
	LastCondensationTime:  time.Time
	FailureCount:          int64
}
