// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/denkhaus/agents/pkg/tools/project/shared

package shared

import (
	"github.com/google/uuid"
	"time"
)

// TaskState represents the current state of a task
#TaskState: string // #enumTaskState

#enumTaskState:
	#TaskStatePending |
	#TaskStateInProgress |
	#TaskStateCompleted |
	#TaskStateBlocked |
	#TaskStateCancelled

#TaskStatePending:    #TaskState & "pending"
#TaskStateInProgress: #TaskState & "in-progress"
#TaskStateCompleted:  #TaskState & "completed"
#TaskStateBlocked:    #TaskState & "blocked"
#TaskStateCancelled:  #TaskState & "cancelled"

// Task represents a single task in the project hierarchy
#Task: {
	id:              uuid.#UUID        @go(ID)
	project_id:      uuid.#UUID        @go(ProjectID)
	parent_id?:      null | uuid.#UUID @go(ParentID,*uuid.UUID)
	title:           string            @go(Title)
	description:     string            @go(Description)
	state:           #TaskState        @go(State)
	complexity:      int               @go(Complexity)
	depth:           int               @go(Depth)
	estimate?:       null | int64      @go(Estimate,*int64)
	assigned_agent?: null | uuid.#UUID @go(AssignedAgent,*uuid.UUID)
	dependencies?: [...uuid.#UUID] @go(Dependencies,[]uuid.UUID)
	dependents?: [...uuid.#UUID] @go(Dependents,[]uuid.UUID)
	created_at:    time.Time        @go(CreatedAt)
	updated_at:    time.Time        @go(UpdatedAt)
	completed_at?: null | time.Time @go(CompletedAt,*time.Time)
}

// Project represents a project containing hierarchical tasks
#Project: {
	id:          uuid.#UUID @go(ID)
	title:       string     @go(Title)
	description: string     @go(Description)
	created_at:  time.Time  @go(CreatedAt)
	updated_at:  time.Time  @go(UpdatedAt)

	// Progress metrics
	total_tasks:     int     @go(TotalTasks)
	completed_tasks: int     @go(CompletedTasks)
	progress:        float64 @go(Progress)
}

// ProjectProgress represents detailed progress information
#ProjectProgress: {
	project_id:        uuid.#UUID @go(ProjectID)
	total_tasks:       int        @go(TotalTasks)
	completed_tasks:   int        @go(CompletedTasks)
	in_progress_tasks: int        @go(InProgressTasks)
	pending_tasks:     int        @go(PendingTasks)
	blocked_tasks:     int        @go(BlockedTasks)
	cancelled_tasks:   int        @go(CancelledTasks)
	overall_progress:  float64    @go(OverallProgress)
}

// TaskFilter represents filtering options for task queries
#TaskFilter: {
	project_id?:     null | uuid.#UUID @go(ProjectID,*uuid.UUID)
	parent_id?:      null | uuid.#UUID @go(ParentID,*uuid.UUID)
	state?:          null | #TaskState @go(State,*TaskState)
	min_depth?:      null | int        @go(MinDepth,*int)
	max_depth?:      null | int        @go(MaxDepth,*int)
	min_complexity?: null | int        @go(MinComplexity,*int)
	max_complexity?: null | int        @go(MaxComplexity,*int)
}

// TaskUpdates represents the fields that can be updated in bulk
#TaskUpdates: {
	state?:      null | #TaskState @go(State,*TaskState)
	complexity?: null | int        @go(Complexity,*int)
}

// Repository defines the interface for task and project persistence
#Repository: _
