// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/denkhaus/agents/pkg/tools/project

package project

import "github.com/denkhaus/agents/pkg/tools/project/shared"

// ValidationError represents a validation error
#ValidationError: {
	field:   string @go(Field)
	message: string @go(Message)
}

// createProjectArgs holds the input for creating a project
_#createProjectArgs: {
	title:   string @go(Title)
	details: string @go(Details)
}

// createProjectResult holds the output for creating a project
_#createProjectResult: {
	project?: null | shared.#Project @go(Project,*shared.Project)
	message:  string                 @go(Message)
}

// getProjectArgs holds the input for getting a project
_#getProjectArgs: {
	project_id: string @go(ProjectID)
}

// updateProjectDescriptionArgs holds the input for updating a project description
_#updateProjectDescriptionArgs: {
	project_id:  string @go(ProjectID)
	description: string @go(Description)
}

// listProjectsArgs holds the input for listing projects (empty struct for no parameters)
_#listProjectsArgs: {}

// listProjectsResult holds the output for listing projects
_#listProjectsResult: {
	projects: [...null | shared.#Project] @go(Projects,[]*shared.Project)
	count: int @go(Count)
}

// createTaskArgs holds the input for creating a task
_#createTaskArgs: {
	project_id:  string        @go(ProjectID)
	parent_id?:  null | string @go(ParentID,*string)
	title:       string        @go(Title)
	description: string        @go(Description)
	complexity:  int           @go(Complexity)
}

// updateTaskDescriptionArgs holds the input for updating a task description
_#updateTaskDescriptionArgs: {
	task_id:     string @go(TaskID)
	description: string @go(Description)
}

// getTaskArgs holds the input for getting a task
_#getTaskArgs: {
	task_id: string @go(TaskID)
}

// updateTaskStateArgs holds the input for updating task state
_#updateTaskStateArgs: {
	task_id: string            @go(TaskID)
	state:   shared.#TaskState @go(State)
}

// getProjectProgressArgs holds the input for getting project progress
_#getProjectProgressArgs: {
	project_id: string @go(ProjectID)
}

// getChildTasksArgs holds the input for getting child tasks
_#getChildTasksArgs: {
	task_id: string @go(TaskID)
}

// getChildTasksResult holds the output for getting child tasks
_#getChildTasksResult: {
	tasks: [...null | shared.#Task] @go(Tasks,[]*shared.Task)
	count: int @go(Count)
}

// getParentTaskArgs holds the input for getting the parent task
_#getParentTaskArgs: {
	task_id: string @go(TaskID)
}

// deleteTaskArgs defines the arguments for deleting a task
_#deleteTaskArgs: {
	task_id: string @go(TaskID)
}

// deleteTaskResult defines the result of deleting a task
_#deleteTaskResult: {
	message: string @go(Message)
}

// updateTaskArgs defines the arguments for updating a task
_#updateTaskArgs: {
	task_id:     string            @go(TaskID)
	title:       string            @go(Title)
	description: string            @go(Description)
	complexity:  int               @go(Complexity)
	state:       shared.#TaskState @go(State)
}

// updateTaskResult defines the result of updating a task
_#updateTaskResult: {
	task?:   null | shared.#Task @go(Task,*shared.Task)
	message: string              @go(Message)
}

// deleteTaskSubtreeArgs defines the arguments for deleting a task subtree
_#deleteTaskSubtreeArgs: {
	task_id: string @go(TaskID)
}

// deleteTaskSubtreeResult defines the result of deleting a task subtree
_#deleteTaskSubtreeResult: {
	message: string @go(Message)
}

// listTasksByStateArgs defines the arguments for listing tasks by state
_#listTasksByStateArgs: {
	project_id: string            @go(ProjectID)
	state:      shared.#TaskState @go(State)
}

// listTasksByStateResult defines the result of listing tasks by state
_#listTasksByStateResult: {
	tasks?: [...null | shared.#Task] @go(Tasks,[]*shared.Task)
	count:   int    @go(Count)
	message: string @go(Message)
}

// getRootTasksArgs defines the arguments for getting root tasks
_#getRootTasksArgs: {
	project_id: string @go(ProjectID)
}

// getRootTasksResult defines the result of getting root tasks
_#getRootTasksResult: {
	tasks?: [...null | shared.#Task] @go(Tasks,[]*shared.Task)
	count:   int    @go(Count)
	message: string @go(Message)
}

// findTasksNeedingBreakdownArgs defines the arguments for finding tasks needing breakdown
_#findTasksNeedingBreakdownArgs: {
	project_id: string @go(ProjectID)
}

// findTasksNeedingBreakdownResult defines the result of finding tasks needing breakdown
_#findTasksNeedingBreakdownResult: {
	tasks?: [...null | shared.#Task] @go(Tasks,[]*shared.Task)
	count:   int    @go(Count)
	message: string @go(Message)
}

// findNextActionableTaskArgs defines the arguments for finding the next actionable task
_#findNextActionableTaskArgs: {
	project_id: string @go(ProjectID)
}

// findNextActionableTaskResult defines the result of finding the next actionable task
_#findNextActionableTaskResult: {
	task?:   null | shared.#Task @go(Task,*shared.Task)
	message: string              @go(Message)
}

// updateProjectArgs defines the arguments for updating a project
_#updateProjectArgs: {
	project_id:  string @go(ProjectID)
	title:       string @go(Title)
	description: string @go(Description)
}

// updateProjectResult defines the result of updating a project
_#updateProjectResult: {
	project?: null | shared.#Project @go(Project,*shared.Project)
	message:  string                 @go(Message)
}

// deleteProjectArgs defines the arguments for deleting a project
_#deleteProjectArgs: {
	project_id: string @go(ProjectID)
}

// deleteProjectResult defines the result of deleting a project
_#deleteProjectResult: {
	message: string @go(Message)
}

// listTasksForProjectArgs defines the arguments for listing all tasks in a project
_#listTasksForProjectArgs: {
	project_id: string @go(ProjectID)
}

// listTasksForProjectResult defines the result of listing all tasks in a project
_#listTasksForProjectResult: {
	tasks?: [...null | shared.#Task] @go(Tasks,[]*shared.Task)
	count:   int    @go(Count)
	message: string @go(Message)
}

// bulkUpdateTasksArgs defines the arguments for bulk updating tasks
_#bulkUpdateTasksArgs: {
	task_ids: [...string] @go(TaskIDs,[]string)
	state?:      null | shared.#TaskState @go(State,*shared.TaskState)
	complexity?: null | int               @go(Complexity,*int)
}

// bulkUpdateTasksResult defines the result of bulk updating tasks
_#bulkUpdateTasksResult: {
	message: string @go(Message)
	count:   int    @go(Count)
}

// duplicateTaskArgs defines the arguments for duplicating a task
_#duplicateTaskArgs: {
	task_id:        string @go(TaskID)
	new_project_id: string @go(NewProjectID)
}

// duplicateTaskResult defines the result of duplicating a task
_#duplicateTaskResult: {
	task?:   null | shared.#Task @go(Task,*shared.Task)
	message: string              @go(Message)
}

// setTaskEstimateArgs defines the arguments for setting a task estimate
_#setTaskEstimateArgs: {
	task_id:  string @go(TaskID)
	estimate: int64  @go(Estimate)
}

// setTaskEstimateResult defines the result of setting a task estimate
_#setTaskEstimateResult: {
	task?:   null | shared.#Task @go(Task,*shared.Task)
	message: string              @go(Message)
}

// listAvailableAgentsArgs defines the arguments for listing available agents (empty struct)
_#listAvailableAgentsArgs: {}

// listAvailableAgentsResult defines the result of listing available agents
_#listAvailableAgentsResult: {
	agents: [...#AgentInfo] @go(Agents,[]AgentInfo)
	count:   int    @go(Count)
	message: string @go(Message)
}

// AgentInfo represents information about an available agent
#AgentInfo: {
	id:          string @go(ID)
	name:        string @go(Name)
	role:        string @go(Role)
	description: string @go(Description)
}

// assignTaskToAgentArgs defines the arguments for assigning a task to an agent
_#assignTaskToAgentArgs: {
	task_id:  string @go(TaskID)
	agent_id: string @go(AgentID)
}

// assignTaskToAgentResult defines the result of assigning a task to an agent
_#assignTaskToAgentResult: {
	task?:   null | shared.#Task @go(Task,*shared.Task)
	message: string              @go(Message)
}

// unassignTaskFromAgentArgs defines the arguments for unassigning a task from an agent
_#unassignTaskFromAgentArgs: {
	task_id: string @go(TaskID)
}

// unassignTaskFromAgentResult defines the result of unassigning a task from an agent
_#unassignTaskFromAgentResult: {
	task?:   null | shared.#Task @go(Task,*shared.Task)
	message: string              @go(Message)
}

// listTasksByAgentArgs defines the arguments for listing tasks assigned to a specific agent
_#listTasksByAgentArgs: {
	project_id: string @go(ProjectID)
	agent_id:   string @go(AgentID)
}

// listTasksByAgentResult defines the result of listing tasks assigned to a specific agent
_#listTasksByAgentResult: {
	tasks?: [...null | shared.#Task] @go(Tasks,[]*shared.Task)
	count:   int    @go(Count)
	message: string @go(Message)
}

// listUnassignedTasksArgs defines the arguments for listing unassigned tasks
_#listUnassignedTasksArgs: {
	project_id: string @go(ProjectID)
}

// listUnassignedTasksResult defines the result of listing unassigned tasks
_#listUnassignedTasksResult: {
	tasks?: [...null | shared.#Task] @go(Tasks,[]*shared.Task)
	count:   int    @go(Count)
	message: string @go(Message)
}

#ProjectRepositoryType: string // #enumProjectRepositoryType

#enumProjectRepositoryType:
	#ProjectRepositoryTypeInMemory |
	#ProjectRepositoryTypePostgres

#ProjectRepositoryTypeInMemory: #ProjectRepositoryType & "inmemory"
#ProjectRepositoryTypePostgres: #ProjectRepositoryType & "postgres"

// ToolSetConfig holds configuration for the project management toolset
#ToolSetConfig: {
	repository_type: #ProjectRepositoryType @go(RepositoryType)
	database_url?:   null | string          @go(DatabaseURL,*string)
	read_only:       bool                   @go(IsReadOnly)
}
