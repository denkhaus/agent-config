// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/denkhaus/agents/pkg/tools/project

package project

import (
	"github.com/google/uuid"
	"time"
)

// TaskState represents the current state of a task
#TaskState: string // #enumTaskState

#enumTaskState:
	#TaskStatePending |
	#TaskStateInProgress |
	#TaskStateCompleted |
	#TaskStateBlocked |
	#TaskStateCancelled

#TaskStatePending:    #TaskState & "pending"
#TaskStateInProgress: #TaskState & "in-progress"
#TaskStateCompleted:  #TaskState & "completed"
#TaskStateBlocked:    #TaskState & "blocked"
#TaskStateCancelled:  #TaskState & "cancelled"

// Task represents a single task in the project hierarchy
#Task: {
	id:          uuid.#UUID        @go(ID)
	project_id:  uuid.#UUID        @go(ProjectID)
	parent_id?:  null | uuid.#UUID @go(ParentID,*uuid.UUID)
	title:       string            @go(Title)
	description: string            @go(Description)
	state:       #TaskState        @go(State)
	complexity:  int               @go(Complexity)
	depth:       int               @go(Depth)
	estimate?:   null | int64      @go(Estimate,*int64)
	dependencies?: [...uuid.#UUID] @go(Dependencies,[]uuid.UUID)
	dependents?: [...uuid.#UUID] @go(Dependents,[]uuid.UUID)
	created_at:    time.Time        @go(CreatedAt)
	updated_at:    time.Time        @go(UpdatedAt)
	completed_at?: null | time.Time @go(CompletedAt,*time.Time)
}

// Project represents a project containing hierarchical tasks
#Project: {
	id:          uuid.#UUID @go(ID)
	title:       string     @go(Title)
	description: string     @go(Description)
	created_at:  time.Time  @go(CreatedAt)
	updated_at:  time.Time  @go(UpdatedAt)

	// Progress metrics
	total_tasks:     int     @go(TotalTasks)
	completed_tasks: int     @go(CompletedTasks)
	progress:        float64 @go(Progress)
}

// ProjectProgress represents detailed progress information
#ProjectProgress: {
	project_id:        uuid.#UUID @go(ProjectID)
	total_tasks:       int        @go(TotalTasks)
	completed_tasks:   int        @go(CompletedTasks)
	in_progress_tasks: int        @go(InProgressTasks)
	pending_tasks:     int        @go(PendingTasks)
	blocked_tasks:     int        @go(BlockedTasks)
	cancelled_tasks:   int        @go(CancelledTasks)
	overall_progress:  float64    @go(OverallProgress)
}

// TaskFilter represents filtering options for task queries
#TaskFilter: {
	project_id?:     null | uuid.#UUID @go(ProjectID,*uuid.UUID)
	parent_id?:      null | uuid.#UUID @go(ParentID,*uuid.UUID)
	state?:          null | #TaskState @go(State,*TaskState)
	min_depth?:      null | int        @go(MinDepth,*int)
	max_depth?:      null | int        @go(MaxDepth,*int)
	min_complexity?: null | int        @go(MinComplexity,*int)
	max_complexity?: null | int        @go(MaxComplexity,*int)
}

// ValidationError represents a validation error
#ValidationError: {
	field:   string @go(Field)
	message: string @go(Message)
}

// TaskUpdates represents the fields that can be updated in bulk
#TaskUpdates: {
	state?:      null | #TaskState @go(State,*TaskState)
	complexity?: null | int        @go(Complexity,*int)
}

// createProjectArgs holds the input for creating a project
_#createProjectArgs: {
	title:   string @go(Title)
	details: string @go(Details)
}

// createProjectResult holds the output for creating a project
_#createProjectResult: {
	project?: null | #Project @go(Project,*Project)
	message:  string          @go(Message)
}

// getProjectArgs holds the input for getting a project
_#getProjectArgs: {
	project_id: string @go(ProjectID)
}

// updateProjectDescriptionArgs holds the input for updating a project description
_#updateProjectDescriptionArgs: {
	project_id:  string @go(ProjectID)
	description: string @go(Description)
}

// listProjectsArgs holds the input for listing projects (empty struct for no parameters)
_#listProjectsArgs: {}

// listProjectsResult holds the output for listing projects
_#listProjectsResult: {
	projects: [...null | #Project] @go(Projects,[]*Project)
	count: int @go(Count)
}

// createTaskArgs holds the input for creating a task
_#createTaskArgs: {
	project_id:  string        @go(ProjectID)
	parent_id?:  null | string @go(ParentID,*string)
	title:       string        @go(Title)
	description: string        @go(Description)
	complexity:  int           @go(Complexity)
}

// updateTaskDescriptionArgs holds the input for updating a task description
_#updateTaskDescriptionArgs: {
	task_id:     string @go(TaskID)
	description: string @go(Description)
}

// getTaskArgs holds the input for getting a task
_#getTaskArgs: {
	task_id: string @go(TaskID)
}

// updateTaskStateArgs holds the input for updating task state
_#updateTaskStateArgs: {
	task_id: string     @go(TaskID)
	state:   #TaskState @go(State)
}

// getProjectProgressArgs holds the input for getting project progress
_#getProjectProgressArgs: {
	project_id: string @go(ProjectID)
}

// getChildTasksArgs holds the input for getting child tasks
_#getChildTasksArgs: {
	task_id: string @go(TaskID)
}

// getChildTasksResult holds the output for getting child tasks
_#getChildTasksResult: {
	tasks: [...null | #Task] @go(Tasks,[]*Task)
	count: int @go(Count)
}

// getParentTaskArgs holds the input for getting the parent task
_#getParentTaskArgs: {
	task_id: string @go(TaskID)
}

// deleteTaskArgs defines the arguments for deleting a task
_#deleteTaskArgs: {
	task_id: string @go(TaskID)
}

// deleteTaskResult defines the result of deleting a task
_#deleteTaskResult: {
	message: string @go(Message)
}

// updateTaskArgs defines the arguments for updating a task
_#updateTaskArgs: {
	task_id:     string     @go(TaskID)
	title:       string     @go(Title)
	description: string     @go(Description)
	complexity:  int        @go(Complexity)
	state:       #TaskState @go(State)
}

// updateTaskResult defines the result of updating a task
_#updateTaskResult: {
	task?:   null | #Task @go(Task,*Task)
	message: string       @go(Message)
}

// deleteTaskSubtreeArgs defines the arguments for deleting a task subtree
_#deleteTaskSubtreeArgs: {
	task_id: string @go(TaskID)
}

// deleteTaskSubtreeResult defines the result of deleting a task subtree
_#deleteTaskSubtreeResult: {
	message: string @go(Message)
}

// listTasksByStateArgs defines the arguments for listing tasks by state
_#listTasksByStateArgs: {
	project_id: string     @go(ProjectID)
	state:      #TaskState @go(State)
}

// listTasksByStateResult defines the result of listing tasks by state
_#listTasksByStateResult: {
	tasks?: [...null | #Task] @go(Tasks,[]*Task)
	count:   int    @go(Count)
	message: string @go(Message)
}

// getRootTasksArgs defines the arguments for getting root tasks
_#getRootTasksArgs: {
	project_id: string @go(ProjectID)
}

// getRootTasksResult defines the result of getting root tasks
_#getRootTasksResult: {
	tasks?: [...null | #Task] @go(Tasks,[]*Task)
	count:   int    @go(Count)
	message: string @go(Message)
}

// findTasksNeedingBreakdownArgs defines the arguments for finding tasks needing breakdown
_#findTasksNeedingBreakdownArgs: {
	project_id: string @go(ProjectID)
}

// findTasksNeedingBreakdownResult defines the result of finding tasks needing breakdown
_#findTasksNeedingBreakdownResult: {
	tasks?: [...null | #Task] @go(Tasks,[]*Task)
	count:   int    @go(Count)
	message: string @go(Message)
}

// findNextActionableTaskArgs defines the arguments for finding the next actionable task
_#findNextActionableTaskArgs: {
	project_id: string @go(ProjectID)
}

// findNextActionableTaskResult defines the result of finding the next actionable task
_#findNextActionableTaskResult: {
	task?:   null | #Task @go(Task,*Task)
	message: string       @go(Message)
}

// updateProjectArgs defines the arguments for updating a project
_#updateProjectArgs: {
	project_id:  string @go(ProjectID)
	title:       string @go(Title)
	description: string @go(Description)
}

// updateProjectResult defines the result of updating a project
_#updateProjectResult: {
	project?: null | #Project @go(Project,*Project)
	message:  string          @go(Message)
}

// deleteProjectArgs defines the arguments for deleting a project
_#deleteProjectArgs: {
	project_id: string @go(ProjectID)
}

// deleteProjectResult defines the result of deleting a project
_#deleteProjectResult: {
	message: string @go(Message)
}

// listTasksForProjectArgs defines the arguments for listing all tasks in a project
_#listTasksForProjectArgs: {
	project_id: string @go(ProjectID)
}

// listTasksForProjectResult defines the result of listing all tasks in a project
_#listTasksForProjectResult: {
	tasks?: [...null | #Task] @go(Tasks,[]*Task)
	count:   int    @go(Count)
	message: string @go(Message)
}

// bulkUpdateTasksArgs defines the arguments for bulk updating tasks
_#bulkUpdateTasksArgs: {
	task_ids: [...string] @go(TaskIDs,[]string)
	state?:      null | #TaskState @go(State,*TaskState)
	complexity?: null | int        @go(Complexity,*int)
}

// bulkUpdateTasksResult defines the result of bulk updating tasks
_#bulkUpdateTasksResult: {
	message: string @go(Message)
	count:   int    @go(Count)
}

// duplicateTaskArgs defines the arguments for duplicating a task
_#duplicateTaskArgs: {
	task_id:        string @go(TaskID)
	new_project_id: string @go(NewProjectID)
}

// duplicateTaskResult defines the result of duplicating a task
_#duplicateTaskResult: {
	task?:   null | #Task @go(Task,*Task)
	message: string       @go(Message)
}

// setTaskEstimateArgs defines the arguments for setting a task estimate
_#setTaskEstimateArgs: {
	task_id:  string @go(TaskID)
	estimate: int64  @go(Estimate)
}

// setTaskEstimateResult defines the result of setting a task estimate
_#setTaskEstimateResult: {
	task?:   null | #Task @go(Task,*Task)
	message: string       @go(Message)
}
