// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go trpc.group/trpc-go/trpc-agent-go/event

// Package event provides the event system for agent communication.
package event

import (
	"trpc.group/trpc-go/trpc-agent-go/model"
	"time"
)

// Event represents an event in conversation between agents and users.
#Event: {
	// Response is the base struct for all LLM response functionality.
	Response?: null | model.#Response @go(,*model.Response)

	// InvocationID is the invocation ID of the event.
	invocationId: string @go(InvocationID)

	// Author is the author of the event.
	author: string @go(Author)

	// ID is the unique identifier of the event.
	id: string @go(ID)

	// Timestamp is the timestamp of the event.
	timestamp: time.Time @go(Timestamp)

	// Branch is the branch identifier for hierarchical event filtering.
	branch?: string @go(Branch)

	// RequiresCompletion indicates if this event needs completion signaling.
	requiresCompletion?: bool @go(RequiresCompletion)

	// CompletionID is used for completion signaling of this event.
	completionId?: string @go(CompletionID)

	// LongRunningToolIDs is the Set of ids of the long running function calls.
	// Agent client will know from this field about which function call is long running.
	// only valid for function call event
	longRunningToolIDs?: {[string]: {}} @go(LongRunningToolIDs,map[string]struct{})

	// StateDelta contains state changes to be applied to the session.
	stateDelta?: {[string]: bytes} @go(StateDelta,map[string][]byte)
}
