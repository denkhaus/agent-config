// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go trpc.group/trpc-go/trpc-agent-go/agent

package agent

import (
	"trpc.group/trpc-go/trpc-agent-go/session"
	"trpc.group/trpc-go/trpc-agent-go/model"
)

// TransferInfo contains information about a pending agent transfer.
#TransferInfo: {
	// TargetAgentName is the name of the agent to transfer control to.
	TargetAgentName: string

	// Message is the message to send to the target agent.
	Message: string

	// EndInvocation indicates whether to end the current invocation after transfer.
	EndInvocation: bool
}

// Invocation represents the context for a flow execution.
#Invocation: {
	// Agent is the agent that is being invoked.
	Agent: #Agent

	// AgentName is the name of the agent that is being invoked.
	AgentName: string

	// InvocationID is the ID of the invocation.
	InvocationID: string

	// Branch is the branch identifier for hierarchical event filtering.
	Branch: string

	// EndInvocation is a flag that indicates if the invocation is complete.
	EndInvocation: bool

	// Session is the session that is being used for the invocation.
	Session?: null | session.#Session @go(,*session.Session)

	// Model is the model that is being used for the invocation.
	Model: model.#Model

	// Message is the message that is being sent to the agent.
	Message: model.#Message

	// RunOptions is the options for the Run method.
	RunOptions: #RunOptions

	// TransferInfo contains information about a pending agent transfer.
	TransferInfo?: null | #TransferInfo @go(,*TransferInfo)

	// StructuredOutput defines how the model should produce structured output for this invocation.
	StructuredOutput?: null | model.#StructuredOutput @go(,*model.StructuredOutput)

	// StructuredOutputType is the Go type to unmarshal the final JSON into.
	StructuredOutputType: _ @go(,reflect.Type)
}

_#invocationKey: {}

// RunOptions is the options for the Run method.
#RunOptions: {
	// RuntimeState contains key-value pairs that will be merged into the initial state
	// for this specific run. This allows callers to pass dynamic parameters
	// (e.g., room ID, user context) without modifying the agent's base initial state.
	RuntimeState: {...} @go(,map[string]any)
}
