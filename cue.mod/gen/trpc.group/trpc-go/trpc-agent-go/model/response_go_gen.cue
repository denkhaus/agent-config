// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go trpc.group/trpc-go/trpc-agent-go/model

package model

import "time"

#ErrorTypeStreamError: "stream_error"
#ErrorTypeAPIError:    "api_error"
#ErrorTypeFlowError:   "flow_error"

#ObjectTypeError: "error"

// ObjectTypeToolResponse is the object type for tool response events.
#ObjectTypeToolResponse: "tool.response"

// ObjectTypePreprocessingBasic is the object type for basic preprocessing events.
#ObjectTypePreprocessingBasic: "preprocessing.basic"

// ObjectTypePreprocessingContent is the object type for content preprocessing events.
#ObjectTypePreprocessingContent: "preprocessing.content"

// ObjectTypePreprocessingIdentity is the object type for identity preprocessing events.
#ObjectTypePreprocessingIdentity: "preprocessing.identity"

// ObjectTypePreprocessingInstruction is the object type for instruction preprocessing events.
#ObjectTypePreprocessingInstruction: "preprocessing.instruction"

// ObjectTypePreprocessingPlanning is the object type for planning preprocessing events.
#ObjectTypePreprocessingPlanning: "preprocessing.planning"

// ObjectTypePostprocessingPlanning is the object type for planning postprocessing events.
#ObjectTypePostprocessingPlanning:      "postprocessing.planning"
#ObjectTypePostprocessingCodeExecution: "postprocessing.code_execution"

// ObjectTypeTransfer is the object type for agent transfer events.
#ObjectTypeTransfer: "agent.transfer"

// ObjectTypeRunnerCompletion is the object type for runner completion events.
#ObjectTypeRunnerCompletion: "runner.completion"

// ObjectTypeStateUpdate is the object type for state update events.
#ObjectTypeStateUpdate: "state.update"

// ObjectTypeChatCompletionChunk is the object type for chat completion chunk events.
#ObjectTypeChatCompletionChunk: "chat.completion.chunk"

// ObjectTypeChatCompletion is the object type for chat completion events.
#ObjectTypeChatCompletion: "chat.completion"

// Choice represents a single completion choice.
#Choice: {
	// Index is the index of the choice.
	index: int @go(Index)

	// Message is the message content.
	message?: #Message @go(Message)

	// Delta is the delta message content.
	delta?: #Message @go(Delta)

	// FinishReason is the reason the choice was finished.
	// "stop", "length", "content_filter", etc.
	finish_reason?: null | string @go(FinishReason,*string)
}

// Usage represents token usage information.
#Usage: {
	// PromptTokens is the number of tokens in the prompt.
	prompt_tokens: int @go(PromptTokens)

	// CompletionTokens is the number of tokens in the completion.
	completion_tokens: int @go(CompletionTokens)

	// TotalTokens is the total number of tokens in the response.
	total_tokens: int @go(TotalTokens)
}

// Response is the response from the model.
//
// Error Handling Note:
// The Error field in this struct represents API-level errors that occur
// after successful communication with the model service. This is different
// from function-level errors returned by GenerateContent(), which indicate
// system-level failures that prevent communication entirely.
//
// Examples of Response.Error:
// - API rate limit exceeded
// - Content filtered by safety systems
// - Model-specific processing errors
// - Streaming connection errors
//
// Examples of function-level errors:
// - Invalid request parameters
// - Network connectivity issues
// - Authentication failures
#Response: {
	// ID is the unique identifier for this response.
	id: string @go(ID)

	// Object describes the type of object returned (e.g., "chat.completion").
	object: string @go(Object)

	// Created is the Unix timestamp when the response was created.
	created: int64 @go(Created)

	// Model is the model used to generate the response.
	model: string @go(Model)

	// Choices contains the completion choices.
	choices: [...#Choice] @go(Choices,[]Choice)

	// Usage contains token usage information (may be nil for streaming responses).
	usage?: null | #Usage @go(Usage,*Usage)

	// SystemFingerprint is a unique identifier for the backend configuration.
	system_fingerprint?: null | string @go(SystemFingerprint,*string)

	// Error contains API-level error information if the request failed.
	// This is nil for successful responses.
	// Note: This is different from function-level errors returned by GenerateContent().
	error?: null | #ResponseError @go(Error,*ResponseError)

	// Timestamp when this response chunk was received (for streaming).
	timestamp: time.Time @go(Timestamp)

	// Done indicates if the llm flow should stop.
	done: bool @go(Done)

	// IsPartial indicates if this is a partial response.
	is_partial: bool @go(IsPartial)
}

// ResponseError represents an error response from the API.
#ResponseError: {
	// Message is the error message.
	message: string @go(Message)

	// Type is the type of error.
	type: string @go(Type)

	// Param is the parameter that caused the error.
	param?: null | string @go(Param,*string)

	// Code is the error code.
	code?: null | string @go(Code,*string)
}
